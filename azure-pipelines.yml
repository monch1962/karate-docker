# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- script: |
    docker build . -t karate-docker
  displayName: 'Build the Docker container image'

- script: |
    # Spin up the Karate stub in the one container, and save the PID
    docker run -e MOCK=1 -v "$(pwd)/mock-server:/features" -v "$(pwd)/config:/config" --network="host" -p 8999:8080 karate-docker:latest &
    STUB_PID=$!
  displayName: 'Spin up the test stub inside the Karate container'

- script: |
    CURL_DATA=$(curl --data "{\"name\":\"Billie\"}" http://127.0.0.1:8999/cats)
    echo $CURL_DATA
    CURL_DATA=$(curl --data "{\"name\":\"Billie\"}" http://127.0.0.1:8999/hardcoded)
    echo $CURL_DATA
    CURL_DATA=$(curl http://127.0.0.1:8999/cats/)
    echo $CURL_DATA
  displayName: 'Test the stub using curl'

- script: |
    # Spin up the Karate test in another container, and save the PID.
    # This container should send a request to the first container, then get a response
    # back from the stub
    docker run -v "$(pwd)/features:/features" -v "$(pwd)/config:/config" -v "$(pwd)/results:/results" --network="host" karate-docker:latest
    TEST_PID=$!

    # Kill the mock & test container instances
    kill $MOCK_PID
    kill $TEST_PID
  displayName: 'Spin up the test case inside the Karate container, and hit the test stub'  